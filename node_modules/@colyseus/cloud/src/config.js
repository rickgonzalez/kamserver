import fs from 'fs';
import { authenticate } from './tools/auth.js';

const COLYSEUS_CLOUD_JSON = '.colyseus-cloud.json';

const CONFIG = {
  endpoint: process.env.CLOUD_ENDPOINT || "https://cloud-prod.colyseus.io",
  COLYSEUS_CLOUD_JSON,
};

export default CONFIG;

export async function readConfigFile() {
  // read local .colyseus-cloud.json
  if (fs.existsSync(COLYSEUS_CLOUD_JSON)) {
    try {
      const fileContents = await fs.promises.readFile(COLYSEUS_CLOUD_JSON, 'utf8');
      return JSON.parse(fileContents);

    } catch (e) {
      console.error(e);
      process.exit();
    }
  }

  return {};
}

export async function writeConfigFile(configData) {
  await fs.promises.writeFile(COLYSEUS_CLOUD_JSON, JSON.stringify(configData, null, 2));
}

export async function getColyseusConfig(options) {
  if (!options.env) { options.env = "production"; }

  console.log("Environment: " + options.env);

  // read local .colyseus-cloud.json config file.
  const all = await readConfigFile();

  // when .reset is provided, force new authentication
  if (options.reset) {
    all[options.env] = undefined;
  }

  // check if requested environment is present
  if (!all[options.env]) {
    // authenticate to retrieve environment data
    const envData = await authenticate(CONFIG.endpoint);

    // combine with existing config
    all[options.env] = envData;

    // write to file
    await writeConfigFile(all);
  }

  const current = all[options.env];

  // throw if invalid env
  if (!current.applicationId || !current.token) {
    throw new Error(".colyseus-cloud.json '" + options.env + "' must contain valid 'applicationId' and 'token' fields.");
  }

  return {
    env: options.env,
    current,
    all
  };
}
