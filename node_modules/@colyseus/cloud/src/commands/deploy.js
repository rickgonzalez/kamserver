import * as httpie from 'httpie/node';
import open from 'open';
import config, { getColyseusConfig, writeConfigFile } from '../config.js';
import simpleGit, { GitError } from 'simple-git';
import chalk from "chalk";
import { confirm, select } from "@inquirer/prompts";

async function getGitData(options, env) {
  const cwd = process.cwd();

  try {
    const git = simpleGit(cwd);

    const remotes = await git.getRemotes(true);
    if (!remotes[0]) { throw new Error("No git remote found.") }

    const hasMultipleRemotes = (remotes.length > 1);

    // allow user to select the git remote to use
    if ((!options.remote && !env.remote) && remotes.length > 1) {
      try {
        const selectedRemote = await select({
          type: "list",
          name: "remote",
          message: "Select a git remote: (The public deploy key must have been added to this remote)",
          choices: remotes.map((remote) => ({
            name: `${remote.name} (${remote.refs.fetch})`,
            value: remote.refs.fetch
          }))
        });

        options.remote = selectedRemote;
      } catch (e) {
        console.log("No git remote selected. Cancelling.");
        process.exit();
      }
    }

    const remote = options.remote ?? env.remote ?? remotes[0].refs.fetch;
    const branch = options.branch ?? (await git.branch()).current;

    return { branch, remote, git, hasMultipleRemotes };

  } catch (e) {
    if (e instanceof GitError) {
      console.log(`‚ùå Git is not set up. (${e.message})`);
      console.log("");
      console.log("Your project must be using git in order to deploy to Colyseus Cloud:");
      console.log("\tgit init");
      console.log("\tgit remote add origin git@github.com:user/repo.git (use YOUR 'user' and 'repo' names here)");
      console.log("\tgit add .");
      console.log("\tgit push origin main");
      console.log("");
      console.log("Then try again.");

    } else {
      console.error(e);
    }
  }
}

export default async function deploy(options) {
  const configFile = await getColyseusConfig(options);
  const env = configFile.current;

  // detect current branch
  const { branch, remote, git, hasMultipleRemotes } = await getGitData(options || {}, env);

  if (!branch || !remote) {
    console.error("Need a git remote and branch to deploy.");
    process.exit();
  }

  const status = await git.status({});
  if (status.modified.length > 0) {
    console.log("");
    console.log("Only files that are committed and pushed will be deployed.");
    console.log("");
    console.log(chalk.yellow("‚ö†Ô∏è  You have these uncommited changes:"));
    console.log("");
    status.modified.forEach((file) => console.log("‚Üí", chalk.yellow(file)));
    console.log("");

    if (!await confirm({ message: "Would you like to proceed anyway?" })) {
      process.exit();
    }
  }

  // save current remote to config
  // (only if has multiple remotes locally)
  if (hasMultipleRemotes && env.remote !== remote) {
    const configData = Object.assign({}, configFile.all);
    configData[configFile.env] = { ...env, remote, };
    console.log(`üíæ Storing remote (${remote}) in ${config.COLYSEUS_CLOUD_JSON}`);
    await writeConfigFile(configData);
  }

  // TODO: hit webhook for deployment with token
  try {
    // workaround for testing locally
    var endpoint = config.endpoint;
    endpoint = endpoint.replace("localhost", "127.0.0.1");

    await httpie.post(`${endpoint}/deploy`, {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        slug: env.applicationId,
        token: env.token,
        remote,
        branch
      })
    });

  } catch (e) {
    if (e.data && e.data.error) {
      console.log("");
      console.error(`‚ùå ${e.data.error}`);

      if (e.data.error.indexOf("token") >= 0) {
        console.log(`‚ùóÔ∏è Consider deleting the '${config.COLYSEUS_CLOUD_JSON}' file and trying again (or provide --reset)`);
      }
      console.log("");

    } else if (e.message === "Service Unavailable") {
      console.log("");
      console.error(`‚ö†Ô∏è  Colyseus Cloud is in maintenance. Please try again in a few minutes.`);
      console.log("");

    } else {
      console.error(e.message);
    }

    process.exit();
  }

  const previewURL = `${config.endpoint}/application/${env.applicationId}/deployment_logs`;
  console.log('Deployment triggered.');

  if (options.preview) {
    open(previewURL);

  } else {
    console.log(`You can preview your deployment here: ${previewURL} (use --preview to open automatically)`);
  }
};
